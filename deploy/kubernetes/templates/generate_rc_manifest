#! /bin/bash

if [[ $# < 2 ]];then
  echo "parameter error: "
  echo "  usage:"
  echo "  $0 SERVICE NAMESPACE [BUILD_ID]"
  exit 1
fi

# load configuration
root_directory="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/../../.."
. ${root_directory}/deploy/config
. ${root_directory}/deploy/kubernetes/helpers/functions.sh

service=$1
namespace=$2
build=${3:-"latest"}
patch_version=${3:-""}

set -euo pipefail

service_name=$service

# Warning: some wakadoo aliasing under way
server_services=${servers_alias[@]}
if listcontains "$server_services" $service; then
  service_name="servers"
elif [[ $service_name == "eventstore" ]]; then
  service_name=populatedeventstore
fi

image_name=$(eval "echo \$${service_name}_container_image")
major_version=$(eval "echo \$${service_name}_container_major")
minor_version=$(eval "echo \$${service_name}_container_minor")
version=$major_version.$minor_version${patch_version:+".$patch_version"}
dockerimage=${image_name}:$version

echo "Validating $dockerimage"
if [[ $($root_directory/deploy/docker/list-tags $image_name | grep "$version\$") == "" ]]; then
  echo "Docker image not found for $image_name:$version"

  exit 1
else
  echo "Creating manifest for $dockerimage"

  manifests_directory="${root_directory}/deploy/kubernetes/manifests"
  mkdir -p ${manifests_directory}
  replication_controller_manifest="${manifests_directory}/${service}-rc.yml"
  cp ${root_directory}/deploy/kubernetes/templates/${service}/rc.yml ${replication_controller_manifest}

  sed -ie  "s/__SERVICE__/$service/g" ${replication_controller_manifest}
  sed -ie  "s/__MAJOR__/$major_version/g" ${replication_controller_manifest}
  sed -ie  "s/__MINOR__/$minor_version/g" ${replication_controller_manifest}
  sed -ie  "s/__BUILD__/$build/g" ${replication_controller_manifest}
  sed -ie  "s|__DOCKERIMAGE__|$dockerimage|g" ${replication_controller_manifest}
  sed -ie  "s/__NAMESPACE__/$namespace/g" ${replication_controller_manifest}
fi;
